package interfaces

import (
	"time"

	headerVal "github.com/bxcodec/goqueue/headers/value"
)

// Message represents a message that will be published to the queue
// It contains the message ID, action, topic, data, content type, timestamp, headers, and service agent.
// The schema version is set by the SetSchemaVersion method.
// The message is used to publish messages to the queue.
// Read the concept of message publishing in the documentation, here: TODO(bxcodec): Add link to the documentation
type Message struct {
	// ID is the unique identifier for the message.
	// This is set by the publisher to identify the message in the queue.
	// The id is auto-generated by the the library if not provided.
	ID string `json:"id"`
	// Action is the action that will be performed on the message.
	// This is set by the publisher to identify the action that will be performed on the message.
	// For RabbitMQ, the action is the routing key.
	Action string `json:"action"`
	// Topic is the topic that the message will be published to.
	// This is set by the publisher to identify the topic that the message will be published to.
	// For RabbitMQ, the topic is the exchange name.
	Topic string `json:"topic"`
	// Data is the data that will be published to the queue.
	// This is set by the publisher to identify the data that will be published to the queue.
	// It should be a valid JSON object.
	Data any `json:"data"`
	// ContentType is the content type of the message.
	// This is set by the publisher to identify the content type of the message.
	// Default value is "application/json".
	ContentType headerVal.ContentType `json:"-"`
	// Timestamp is the timestamp of the message.
	// This is set by the publisher to identify the timestamp of the message.
	// Default value is the current time.
	Timestamp time.Time `json:"timestamp"`
	// Headers is the headers of the message.
	// This is set by the publisher to identify the headers of the message.
	// This library will provide extra headers values by default based on the library type.
	// Don't use any prefix with :goqueue-, it will conflicted and overrided by the library.
	Headers map[string]interface{} `json:"-"`
	// ServiceAgent is the service agent that will be used to publish the message.
	// This is set by the publisher to identify the service agent that will be used to publish the message.
	// This will be set by the library and override any value
	ServiceAgent headerVal.GoquServiceAgent `json:"-"`
	// SchemaVersion is the schema version of the message.
	// This is set by the publisher to identify the schema version of the message.
	// Default value is the library type.
	// This will be set by the library and override any value
	schemaVersion string
}

// SetSchemaVersion is a method to set the schema version of the message.
// This is used to set the schema version of the message.
// This will be set by the library and override any value
func (m *Message) SetSchemaVersion(v string) {
	m.schemaVersion = v
}

// GetSchemaVersion is a method to get the schema version of the message.
// This is used to get the schema version of the message.
// This will be set by the library and override any value
func (m *Message) GetSchemaVersion() string {
	return m.schemaVersion
}
